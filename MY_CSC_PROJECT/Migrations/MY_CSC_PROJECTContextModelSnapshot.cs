// <auto-generated />
using System;
using MY_CSC_PROJECT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MY_CSC_PROJECT.Migrations
{
    [DbContext(typeof(MY_CSC_PROJECTContext))]
    partial class MY_CSC_PROJECTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ApprovalStage", b =>
                {
                    b.Property<int>("ApprovalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalID"));

                    b.Property<DateTime>("DateActed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("ApprovalID");

                    b.HasIndex("DocumentID");

                    b.ToTable("ApprovalStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEligibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherFOsID")
                        .HasColumnType("int");

                    b.Property<string>("PlaceofBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialEligibilityID")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeofEligibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentID");

                    b.HasIndex("OtherFOsID");

                    b.HasIndex("PositionID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SpecialEligibilityID");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.EvaluationStage", b =>
                {
                    b.Property<int>("EvaluationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationID"));

                    b.Property<DateTime>("DateActed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("EvaluationID");

                    b.HasIndex("DocumentID");

                    b.ToTable("EvaluationStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ODStage", b =>
                {
                    b.Property<int>("ODID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ODID"));

                    b.Property<DateTime>("DateActed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("ODID");

                    b.HasIndex("DocumentID");

                    b.ToTable("ODStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.OtherFOs", b =>
                {
                    b.Property<int>("OtherFOsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherFOsID"));

                    b.Property<string>("OtherFOsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OtherFOsID");

                    b.ToTable("OtherFOs");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionID");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.PostingStage", b =>
                {
                    b.Property<int>("PostingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostingID"));

                    b.Property<DateTime>("DateActed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("PostingID");

                    b.HasIndex("DocumentID");

                    b.ToTable("PostingStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ProofingStage", b =>
                {
                    b.Property<int>("ProofingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProofingID"));

                    b.Property<DateTime>("DateActed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("ProofingID");

                    b.HasIndex("DocumentID");

                    b.ToTable("ProofingStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ReleasingStage", b =>
                {
                    b.Property<int>("ReleasingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReleasingID"));

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.HasKey("ReleasingID");

                    b.HasIndex("DocumentID");

                    b.ToTable("ReleasingStage");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.RolePermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<bool>("CanAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExport")
                        .HasColumnType("bit");

                    b.Property<bool>("CanForward")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemove")
                        .HasColumnType("bit");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.SpecialEligibility", b =>
                {
                    b.Property<int>("SpecialEligibilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialEligibilityID"));

                    b.Property<string>("SpecialEligibilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialEligibilityID");

                    b.ToTable("SpecialEligibility");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ApprovalStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Document", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.OtherFOs", "OtherFOs")
                        .WithMany()
                        .HasForeignKey("OtherFOsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MY_CSC_PROJECT.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MY_CSC_PROJECT.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MY_CSC_PROJECT.Models.SpecialEligibility", "SpecialEligibility")
                        .WithMany()
                        .HasForeignKey("SpecialEligibilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtherFOs");

                    b.Navigation("Position");

                    b.Navigation("Province");

                    b.Navigation("SpecialEligibility");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.EvaluationStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ODStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.PostingStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ProofingStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.ReleasingStage", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Document", "Document")
                        .WithMany("ReleasingStages")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.RolePermission", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.User", b =>
                {
                    b.HasOne("MY_CSC_PROJECT.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Document", b =>
                {
                    b.Navigation("ReleasingStages");
                });

            modelBuilder.Entity("MY_CSC_PROJECT.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
